import * as accessPolicy from "./access-policy/structs";
import * as attributes from "./attributes/structs";
import * as collection from "./collection/structs";
import * as composableNft from "./composable-nft/structs";
import * as composableSvg from "./composable-svg/structs";
import * as composableUrl from "./composable-url/structs";
import * as creators from "./creators/structs";
import * as displayInfo from "./display-info/structs";
import * as frozenPub from "./frozen-pub/structs";
import * as mintCap from "./mint-cap/structs";
import * as mintEvent from "./mint-event/structs";
import * as mintPass from "./mint-pass/structs";
import * as mintSupply from "./mint-supply/structs";
import * as nftBag from "./nft-bag/structs";
import * as nftProtocol from "./nft-protocol/structs";
import * as nft from "./nft/structs";
import * as p2PListDomain from "./p2p-list-domain/structs";
import * as p2PList from "./p2p-list/structs";
import * as plugins from "./plugins/structs";
import * as royaltyStrategyBps from "./royalty-strategy-bps/structs";
import * as royalty from "./royalty/structs";
import * as sessionToken from "./session-token/structs";
import * as supply from "./supply/structs";
import * as svg from "./svg/structs";
import * as symbol from "./symbol/structs";
import * as transferAllowlistDomain from "./transfer-allowlist-domain/structs";
import * as transferAllowlist from "./transfer-allowlist/structs";
import * as transferToken from "./transfer-token/structs";
import {StructClassLoader} from "../_framework/loader";

export function registerClasses(loader: StructClassLoader) {
    loader.register(nftProtocol.NFT_PROTOCOL);
    loader.register(mintCap.Witness);
    loader.register(mintCap.MintCap);
    loader.register(collection.Witness);
    loader.register(collection.Collection);
    loader.register(collection.MintCollectionEvent);
    loader.register(accessPolicy.Witness);
    loader.register(accessPolicy.AccessPolicy);
    loader.register(accessPolicy.AccessPolicyRule);
    loader.register(accessPolicy.NewPolicyEvent);
    loader.register(attributes.Attributes);
    loader.register(nftBag.Key);
    loader.register(nftBag.NftBag);
    loader.register(composableNft.Key);
    loader.register(composableNft.Composition);
    loader.register(svg.Svg);
    loader.register(composableSvg.Witness);
    loader.register(composableSvg.ComposableSvg);
    loader.register(composableSvg.RenderGuard);
    loader.register(composableUrl.Witness);
    loader.register(composableUrl.ComposableUrl);
    loader.register(creators.Creators);
    loader.register(displayInfo.DisplayInfo);
    loader.register(frozenPub.FROZEN_PUB);
    loader.register(mintEvent.BurnEvent);
    loader.register(mintEvent.BurnGuard);
    loader.register(mintEvent.MintEvent);
    loader.register(mintPass.Witness);
    loader.register(mintPass.MetadataDfKey);
    loader.register(mintPass.MintPass);
    loader.register(mintSupply.MintSupply);
    loader.register(nft.Witness);
    loader.register(nft.MintNftEvent);
    loader.register(nft.Nft);
    loader.register(p2PList.Witness);
    loader.register(p2PList.P2PListRule);
    loader.register(p2PListDomain.Witness);
    loader.register(p2PListDomain.P2PListDomain);
    loader.register(plugins.Plugins);
    loader.register(royalty.Witness);
    loader.register(royalty.RoyaltyDomain);
    loader.register(royaltyStrategyBps.BpsRoyaltyStrategy);
    loader.register(royaltyStrategyBps.BpsRoyaltyStrategyRule);
    loader.register(sessionToken.SessionToken);
    loader.register(sessionToken.SessionTokenRule);
    loader.register(sessionToken.TimeOut);
    loader.register(sessionToken.TimeOutDfKey);
    loader.register(supply.Supply);
    loader.register(symbol.Symbol);
    loader.register(transferAllowlist.AllowlistRule);
    loader.register(transferAllowlistDomain.Witness);
    loader.register(transferAllowlistDomain.TransferAllowlistDomain);
    loader.register(transferToken.TransferToken);
    loader.register(transferToken.TransferTokenRule);
}
