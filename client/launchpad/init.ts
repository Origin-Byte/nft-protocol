import * as dutchAuction from "./dutch-auction/structs";
import * as englishAuction from "./english-auction/structs";
import * as fixedPrice from "./fixed-price/structs";
import * as flatFee from "./flat-fee/structs";
import * as frozenPub from "./frozen-pub/structs";
import * as inventory from "./inventory/structs";
import * as launchpad from "./launchpad/structs";
import * as limitedFixedPrice from "./limited-fixed-price/structs";
import * as listing from "./listing/structs";
import * as marketWhitelist from "./market-whitelist/structs";
import * as marketplace from "./marketplace/structs";
import * as proceeds from "./proceeds/structs";
import * as rebate from "./rebate/structs";
import * as venue from "./venue/structs";
import * as warehouse from "./warehouse/structs";
import {StructClassLoader} from "../_framework/loader";

export function registerClasses(loader: StructClassLoader) {
    loader.register(proceeds.Proceeds);
    loader.register(proceeds.QtSold);
    loader.register(venue.Venue);
    loader.register(warehouse.RedeemCommitment);
    loader.register(warehouse.Warehouse);
    loader.register(rebate.Rebate);
    loader.register(rebate.RebateDfKey);
    loader.register(marketplace.Marketplace);
    loader.register(marketplace.MembersDfKey);
    loader.register(marketplace.PermissionlessFlag);
    loader.register(inventory.Inventory);
    loader.register(inventory.WarehouseKey);
    loader.register(listing.Listing);
    loader.register(listing.MembersDfKey);
    loader.register(listing.CreateListingEvent);
    loader.register(listing.DeleteListingEvent);
    loader.register(listing.NftSoldEvent);
    loader.register(listing.RequestToJoin);
    loader.register(listing.RequestToJoinDfKey);
    loader.register(listing.StartSaleDfKey);
    loader.register(listing.WhitelistDfKey);
    loader.register(marketWhitelist.Certificate);
    loader.register(marketWhitelist.Whitelist);
    loader.register(dutchAuction.Bid);
    loader.register(dutchAuction.MarketKey);
    loader.register(dutchAuction.DutchAuctionMarket);
    loader.register(englishAuction.Bid);
    loader.register(englishAuction.MarketKey);
    loader.register(englishAuction.EnglishAuction);
    loader.register(fixedPrice.MarketKey);
    loader.register(fixedPrice.FixedPriceMarket);
    loader.register(flatFee.FlatFee);
    loader.register(frozenPub.FROZEN_PUB);
    loader.register(launchpad.LAUNCHPAD);
    loader.register(limitedFixedPrice.MarketKey);
    loader.register(limitedFixedPrice.LimitedFixedPriceMarket);
}
